name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g. 1.0.0)'
        required: true
        default: ''

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: KI-Assistant v${{ steps.get_version.outputs.version }}
          draft: true
          prerelease: false
          body: |
            KI-Assistant Version ${{ steps.get_version.outputs.version }}
            
            ## Änderungen in dieser Version
            
            _Bitte fügen Sie hier die Änderungen manuell ein._
            
            ## Download
            
            - Windows: KI-Assistant-Setup-${{ steps.get_version.outputs.version }}.exe
            - macOS: KI-Assistant-${{ steps.get_version.outputs.version }}.dmg
            - Linux: KI-Assistant-${{ steps.get_version.outputs.version }}.AppImage

  build:
    name: Build (${{ matrix.os }})
    needs: release
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: win
            artifact_name: KI-Assistant-Setup
            ext: .exe
          - os: macos-latest
            platform: mac
            artifact_name: KI-Assistant
            ext: .dmg
          - os: ubuntu-latest
            platform: linux
            artifact_name: KI-Assistant
            ext: .AppImage

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: |
          npm version ${{ needs.release.outputs.version }} --no-git-tag-version

      # Windows specific setup
      - name: Windows code signing setup
        if: matrix.os == 'windows-latest' && secrets.WIN_CSC_LINK != ''
        shell: bash
        env:
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        run: |
          echo "CSC_LINK=$WIN_CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$WIN_CSC_KEY_PASSWORD" >> $GITHUB_ENV

      # macOS specific setup
      - name: macOS code signing setup
        if: matrix.os == 'macos-latest' && secrets.MAC_CSC_LINK != ''
        shell: bash
        env:
          MAC_CSC_LINK: ${{ secrets.MAC_CSC_LINK }}
          MAC_CSC_KEY_PASSWORD: ${{ secrets.MAC_CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        run: |
          echo "CSC_LINK=$MAC_CSC_LINK" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=$MAC_CSC_KEY_PASSWORD" >> $GITHUB_ENV
          echo "APPLE_ID=$APPLE_ID" >> $GITHUB_ENV
          echo "APPLE_APP_SPECIFIC_PASSWORD=$APPLE_APP_SPECIFIC_PASSWORD" >> $GITHUB_ENV

      # Build the app for the specific platform
      - name: Build app
        run: npm run build:${{ matrix.platform }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload build artifacts to GitHub
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}-${{ needs.release.outputs.version }}-${{ matrix.platform }}
          path: dist/${{ matrix.artifact_name }}-${{ needs.release.outputs.version }}${{ matrix.ext }}

      # Upload to release
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: dist/${{ matrix.artifact_name }}-${{ needs.release.outputs.version }}${{ matrix.ext }}
          asset_name: ${{ matrix.artifact_name }}-${{ needs.release.outputs.version }}${{ matrix.ext }}
          asset_content_type: application/octet-stream

  # Final job to mark release as ready
  finalize:
    name: Finalize Release
    needs: [release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Finalize release
        run: |
          echo "Release build complete: ${{ needs.release.outputs.version }}"
          echo "Please edit the draft release on GitHub to add release notes and publish."