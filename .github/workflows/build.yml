name: Build and Release Windows

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g. 1.0.0)'
        required: false
        default: ''

# Explizite Berechtigungen hinzufügen
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Create ReleaseCreates a new GitHub release with the specified version.

    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            VERSION=$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          gh release create v$VERSION \
            --draft \
            --title "KI-Assistant v$VERSION" \
            --notes "KI-Assistant Version $VERSION
          
            ## Download
          
            - Windows: KI-Assistant-Setup-$VERSION.exe"

  build-windows:
    name: Build Windows
    needs: release
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'latest'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update version
        run: |
          # Change the version directly in package.json
          node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8')); pkg.version = '${{ needs.release.outputs.version }}'; fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));"

      # Build the app for Windows
      - name: Build Windows app
        run: |
          # Führen Sie den Build-Befehl aus und zeigen Sie Details
          npm run build:win

          # Zeigen Sie den Inhalt des dist-Verzeichnisses nach dem Build
          dir dist
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Package artifacts
      - name: Package Windows artifacts
        run: |
          # Suchen Sie die Installationsdatei
          $exeFile = Get-ChildItem -Path dist -Recurse -Include "*.exe" | Select-Object -First 1

          if ($exeFile) {
            mkdir -p output
            Copy-Item $exeFile.FullName -Destination "output/KI-Assistant-Setup-${{ needs.release.outputs.version }}.exe"
          } else {
            Write-Error "No executable found in dist directory"
            exit 1
          }

      # Upload build artifacts to GitHub
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: KI-Assistant-Setup-${{ needs.release.outputs.version }}
          path: output

      # Upload to release using the gh cli
      - name: Upload release asset
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          $assetPath = "output/KI-Assistant-Setup-$env:VERSION.exe"
          if (Test-Path $assetPath) {
            echo "Uploading $assetPath to release..."
            gh release upload "v$env:VERSION" "$assetPath"
          } else {
            echo "Error: Asset not found at $assetPath"
            exit 1
          }

  # Final job to mark release as ready
  finalize:
    name: Finalize Release
    needs: [ release, build-windows ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Finalize release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.release.outputs.version }}
        run: |
          gh release edit v$VERSION --draft=false
          echo "Please edit the draft release on GitHub to add release notes and publish."